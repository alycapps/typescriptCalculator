{"version":3,"sources":["components/NumberBtn.tsx","components/OperatorBtn.tsx","components/OtherBtn.tsx","components/InvisibleBtn.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["style","width","padding","NumberBtn","props","value","number","type","className","onClick","numberClick","OperatorBtn","operator","operatorClick","OtherBtn","otherClick","other","InvisibleBtn","App","state","numbers","operators","display","num1","num2","operatorChosen","answerCalculated","e","val","currentTarget","setState","prevState","displayNum","parseFloat","clearClick","backspaceClick","newDisplayState","i","length","equalClick","answer","this","noPadding","id","aria-describedby","placeholder","readOnly","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36997de3.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface Props {\n  number: number | string;\n  numberClick: (e: React.MouseEvent<HTMLButtonElement>) => void\n};\n\nconst NumberBtn: React.FunctionComponent<Props> = (props)  => (\n      <button value={props.number} type=\"button\" className=\"btn btn-secondary\" onClick={props.numberClick} style={style} >\n        {props.number}\n      </button>\n);\n\nconst style = {\n  width: \"33%\",\n  padding: \"0\"\n};\n\nexport default NumberBtn;","import React from \"react\";\n \nexport interface Props {\n  operator: string,\n  operatorClick: (e: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nconst OperatorBtn = (props: Props) => (\n   <button value={props.operator} type=\"button\" className=\"btn btn-primary\" onClick={props.operatorClick} style={style}>\n     {props.operator}\n   </button>\n);\n\nconst style = {\n  width: \"100%\",\n  padding: \"0\",\n};\n\nexport default OperatorBtn;","import React from \"react\";\n\nexport interface Props {\n  other: string;\n  otherClick: (e: React.MouseEvent<HTMLButtonElement>) => void\n};\n\nconst OtherBtn = (props: Props) => (\n      <button type=\"button\" className=\"btn btn-danger\" onClick={props.otherClick} style={style}>\n        {props.other}\n      </button>\n);\n\nconst style = {\n  width: \"33%\",\n  padding: \"0\",\n};\n\nexport default OtherBtn;","import React from \"react\";\n\nconst InvisibleBtn = () => (\n      <button type=\"button\" className=\"btn btn-link\"  style={style}>\n      </button>\n);\n\nconst style = {\n  width: \"33%\",\n  padding: \"0\",\n};\n\nexport default InvisibleBtn;","import React, { Component, MouseEvent } from 'react';\nimport './App.css';\nimport NumberBtn from \"./components/NumberBtn\";\nimport OperatorBtn from \"./components/OperatorBtn\";\nimport OtherBtn from \"./components/OtherBtn\";\nimport InvisibleBtn from \"./components/InvisibleBtn\"\n\n// No Props on this level\n// export interface Props {\n// }\n\n//typing for state\ninterface State {\n    numbers: number[],\n    operators: string[],\n    display: string | number | undefined,\n    num1: number,\n    num2: number,\n    operator: string,\n    operatorChosen: boolean,\n    answerCalculated: boolean\n};\n\nclass App extends Component<{}, State> {\n  state = {\n    numbers: [7,8,9,4,5,6,1,2,3],\n    operators: [\"/\",\"x\",\"-\",\"+\"],\n    display: \"\",\n    num1: 0,\n    num2: 0,\n    operatorChosen: false,\n    operator: \"\",\n    answerCalculated: false\n  };\n\n  // will update display state to include new value clicked\n  // will add value to num1 or num2 depending on if an operator has been chosen yet\n  numberClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    let val:string = e.currentTarget.value\n    this.setState((prevState) => {\n      return {display: prevState.display + val}\n    });\n  };\n\n  // will update num1 to display state\n  // will update display state to empty string\n  // will update operatorChosen\n  // will update operator\n  operatorClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    let displayNum: number = parseFloat(this.state.display)\n    this.setState(\n      {num1: displayNum},\n      () => {\n        this.setState({display:\"\"})\n      }\n    );\n    this.setState({operatorChosen:true})\n    let val:string = e.currentTarget.value\n    this.setState({operator:val})\n  };\n\n  //will set all states back to defaults\n  clearClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState({operatorChosen:false})\n    this.setState({operator:\"\"})\n    this.setState({num1:0})\n    this.setState({num2:0})\n    this.setState({display:\"\"})\n    this.setState({answerCalculated:false})\n  };\n\n  // will remove last number clicked\n  // will not work for operators\n  backspaceClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    let newDisplayState: string = \"\";\n    for (let i=0; i<(this.state.display.length-1); i++) {\n      newDisplayState = newDisplayState + this.state.display[i]\n    }\n    this.setState({display: newDisplayState});\n  };\n\n  // will update num2 to display state\n  // will perform math based on operator chosen\n  // will update display with answer\n  // will update answerCalculated\n  equalClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    let displayNum: number = parseFloat(this.state.display)\n    this.setState(\n      {num2: displayNum},\n      () => {\n        let answer: number | string;\n        switch(this.state.operator) {\n          case \"/\":\n            answer = this.state.num1 / this.state.num2;\n            break;\n          case \"x\":\n            answer = this.state.num1 * this.state.num2;\n            break;\n          case \"-\":\n            answer = this.state.num1 - this.state.num2;\n            break;\n          case \"+\":\n            answer = this.state.num1 + this.state.num2;\n            break;\n          default:\n            answer = \"something went wrong\"\n        }\n        this.setState({display:answer})\n        this.setState({answerCalculated:true})\n      }\n    );\n  };\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <h1>Typescript Calulator</h1>\n        <div className=\"container\">\n        \n        {/* row where num1 operator and num2 is displayed */}\n        <div className=\"row\">\n            <div className=\"col-md-4\"></div>\n            <div className=\"col-md-4 typed\">\n              {(this.state.operatorChosen) ? (<span>{this.state.num1} {this.state.operator}</span>) : (\"\")}\n              {(this.state.answerCalculated) ? (<span> {this.state.num2}</span>) : (\"\")}\n            </div>\n            <div className=\"col-md-4\"></div>\n          </div>\n\n          {/* row where the form field is displayed */}\n          <div className=\"row\">\n            <div className=\"col-md-4\"></div>\n            <div className=\"col-md-4\" style={style.noPadding}>\n              <div className=\"form-group\">\n                <input className=\"form-control\" id=\"display\" aria-describedby=\"calculatordisplay\" placeholder={this.state.display} readOnly/>\n              </div>\n            </div>\n            <div className=\"col-md-4\"></div>\n          </div>\n\n          {/* row for backspace and clear */}\n          <div className=\"row\">\n            <div className=\"col-md-4\"></div>\n            <div className=\"col-md-3\" style={style.noPadding}>\n              <InvisibleBtn />\n              <OtherBtn other={\"<\"} otherClick={this.backspaceClick}/>\n              <OtherBtn other={\"Clear\"} otherClick={this.clearClick}/>\n            </div>\n            <div className=\"col-md-1\"></div>\n            <div className=\"col-md-4\"></div>\n          </div>\n          \n          <div className=\"row\">\n            <div className=\"col-md-4\"></div>\n\n            {/* column for numbers location */}\n            <div className=\"col-md-3\" style={style.noPadding}>\n              {this.state.numbers.map(number => (\n                <NumberBtn key={number} number={number} numberClick={this.numberClick}/>\n              ))}\n\n              {/* final row */}\n              <NumberBtn number={\".\"} numberClick={this.numberClick}/>\n              <NumberBtn number={0} numberClick={this.numberClick}/>\n              <OtherBtn other={\"=\"} otherClick={this.equalClick}/>\n            </div>\n\n            {/* column for operators location */}\n            <div className=\"col-md-1\" style={style.noPadding}>\n              {this.state.operators.map(operator => (\n                <OperatorBtn key={operator} operator={operator} operatorClick={this.operatorClick}/>\n              ))}\n            </div>\n\n            <div className=\"col-md-4\"></div>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n};\n\nconst style ={\n  noPadding: {\n    padding: \"0px\"\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}